Description:
  This template deploys the resources to automate the container creation

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Prefix Configuration"
        Parameters:
          - PrefixName

      -
        Label:
          default: "VPC Configuration"
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

      -
        Label:
          default: "ECR Repo Configuration"
        Parameters:
          - EcrRepoName


    ParameterLabels:

      PrefixName:
        default: "Prefix Name"

      VpcCIDR:
        default: "VPC CIDR"

      PublicSubnet1CIDR:
        default: "Public Subnet 1 CIDR"

      PublicSubnet2CIDR:
        default: "Public Subnet 2 CIDR"

      PrivateSubnet1CIDR:
        default: "Private Subnet 1 CIDR"

      PrivateSubnet2CIDR:
        default: "Private Subnet 2 CIDR"

      EcrRepoName:
        default: "ECR Repository Name"


Parameters:
  PrefixName:
    Description: An environment name that will be prefixed to resource names (only contain lowercase letters and numbers or underscore (_))
    Type: String
    Default: dna_team
    AllowedPattern: ^[a-z0-9_.]+$
    ConstraintDescription: Malformed input-Parameter PrefixName must only contain lowercase letters and numbers or underscore (_)

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for the VPC of Lab
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.0/24

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.0/28

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.32/28

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.128/28

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.160/28

  EcrRepoName:
    Description: Enter the Repository Name in ECR
    Type: String
    Default: lab_repo

Resources:
  # VPC with multi-AZ
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref PrefixName
        - Key: "Project"
          Value: "Container Lab"
  # IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PrefixName
        - Key: "Project"
          Value: "Container Lab"

  # IGW Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Public Subnet (AZ1)
        - Key: "Project"
          Value: "Container Lab"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Public Subnet (AZ2)
        - Key: "Project"
          Value: "Container Lab"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Private Subnet (AZ1)
        - Key: "Project"
          Value: "Container Lab"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Private Subnet (AZ2)
        - Key: "Project"
          Value: "Container Lab"

  # NAT Gateway EIP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Ref PrefixName
        - Key: "Project"
          Value: "Container Lab"

  # Route Table for public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Public Routes
        - Key: "Project"
          Value: "Container Lab"

  # Route for public subnet
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route table attachment for public subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Route table attachment for public subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Route Table for private subnet 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Private Routes (AZ1)
        - Key: "Project"
          Value: "Container Lab"

  # Route for private subnet 1
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Route table attachment for private subnet 1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  # Route Table for private subnet 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Private Routes (AZ2)
        - Key: "Project"
          Value: "Container Lab"

  # Route for private subnet 2
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Route table attachment for private subnet 2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # NACL for public subnets
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} NACL (Public Subnets)
        - Key: "Project"
          Value: "Container Lab"

  # Default Inbound Rule for NACL of public subnets
  PublicNetworkAclEntryInbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0

  # Default Outbound Rule for NACL of public subnets
  PublicNetworkAclEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0

  # NACL association for public subnet 1
  PublicSubnet1NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PublicSubnet1
       NetworkAclId: !Ref PublicNetworkAcl

  # NACL association for public subnet 2
  PublicSubnet2NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PublicSubnet2
       NetworkAclId: !Ref PublicNetworkAcl

  # NACL for private subnets
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} NACL (Private Subnets)
        - Key: "Project"
          Value: "Container Lab"

  # Default Inbound Rule for NACL of private subnets
  PrivateNetworkAclEntryInbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0

  # Default Outbound Rule for NACL of private subnets
  PrivateNetworkAclEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0

  # NACL association for private subnet 1
  PrivateSubnet1NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PrivateSubnet1
       NetworkAclId: !Ref PrivateNetworkAcl

  # NACL association for private subnet 2
  PrivateSubnet2NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PrivateSubnet2
       NetworkAclId: !Ref PrivateNetworkAcl

  # SecurityGroup for VPC
  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${PrefixName}_sg'
      GroupDescription: "Security group with default rule for batch job"
      VpcId: !Ref VPC
      Tags:
        - Key: "Project"
          Value: "Container Lab"

  # Security Group Ingress
  SecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: VPCSecurityGroup
    Properties:
      GroupId: !GetAtt VPCSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt VPCSecurityGroup.GroupId
      Description: "SG refer to itself"

  # ECR Policy for Batch Role
  ECRCustomPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    DependsOn: EcrRepo
    Properties:
      ManagedPolicyName: !Sub '${PrefixName}_EcrCustomPolicy'
      PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:CompleteLayerUpload
              - ecr:DescribeImages
              - ecr:DescribeRepositories
              - ecr:ListTagsForResource
              - ecr:BatchDeleteImage
              - ecr:ListImages
              - ecr:InitiateLayerUpload
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchDeleteImage
              - ecr:DeleteRepository
              - ecr:PutImage
              - ecr:UploadLayerPart
            Resource:
              - !Sub 'arn:aws:ecr:*:${AWS::AccountId}:repository/${EcrRepo}'
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - ecr:CreateRepository
              - ecr:GetAuthorizationToken
            Resource: "*"

  # ====================ECR====================
  EcrRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref EcrRepoName
  # ====================Batch====================
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  # ECS instance profile
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: EcsInstanceRole

  # EcsInstanceRole configure required access
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - Ref: ECRCustomPolicy

    # JobDefinition of Batch
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: container_builder
      # Setup mount points and commands
      ContainerProperties:
        MountPoints:
        - ReadOnly: false
          SourceVolume: local
          ContainerPath: "/var/run/docker.sock"
        Volumes:
          - Host:
              SourcePath: "/var/run/docker.sock"
            Name: local
        Environment:
          - Name: SCRIPT_BUCKET_NAME
            Value: ecv-dna-container-building-lab
          - Name: REPO_NAME
            Value: !Ref EcrRepoName
          - Name: ACC_ID
            Value: !Ref AWS::AccountId
          - Name: REGION
            Value: !Ref AWS::Region
          - Name: LAMBDA_NAME
            Value: !Ref InitFunction
        Command:
          - sh
          - "-c"
          - amazon-linux-extras install docker -y
            && yum install aws-cli -y
            && mkdir docker_workplace
            && cd docker_workplace
            && aws s3 cp s3://$SCRIPT_BUCKET_NAME/container_lab/docker/ . --recursive --include "*"
            && $(aws ecr get-login --no-include-email --region $REGION)
            && docker build -t $REPO_NAME .
            && docker tag $REPO_NAME:latest $ACC_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:latest
            && docker push $ACC_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:latest
            && aws lambda invoke --function-name $LAMBDA_NAME --region $REGION --payload '{"RequestType":"BatchJobTrigger", "ResourceProperties":[{"Type":"Lab", "Name":"Lab_Demo", "Description":"Create Batch Job Definition for Lab", "Command":["python","./lab_scripts/main.py"], "EnvironmentVariables":[{"name":"REPO_NAME", "value":"'$REPO_NAME'"}, {"name":"REGION", "value":"'$REGION'"}]}]}' outfile
        Vcpus: 2
        Memory: 2000
        # Using default image provide by AWS
        Image: amazonlinux
      RetryStrategy:
        Attempts: 1

  # JobQueue of Batch job
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub '${PrefixName}_Lab_Queue'
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ComputeEnvironment

  # ComputeEnvironment of Batch job
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Sub '${PrefixName}_Lab_ComputeResource'
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 64
        InstanceTypes:
          - optimal
        Tags: {"Name" : "Private Batch Instance", "Project": "Container Lab"}
        Subnets:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
        SecurityGroupIds:
          - Ref: VPCSecurityGroup
        InstanceRole:
          Ref: IamInstanceProfile
      ServiceRole:
        Ref: BatchServiceRole


  # Lambda Layer
  RequestLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: ecv-dna-container-building-lab
        S3Key: container_lab/lambda/requests_module.zip
      Description: Requests layer
      LayerName: requests-layer
      LicenseInfo: MIT

  # Lambda Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSBatchFullAccess
        - Ref: ECRCustomPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: "Project"
          Value: "Container Lab"

  # Lambda Function
  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${PrefixName}_cfn_init'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Description: A Handler for initial job
      Timeout: 300
      Layers:
        - !Ref RequestLayer
      Code:
        # Choose your script in a specific S3 bucket.
        S3Bucket: ecv-dna-container-building-lab
        S3Key: container_lab/lambda/cfn_init_function.zip
      Environment:
        Variables:
          EcrImageId: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepoName}:latest'
      Tags:
        - Key: "Project"
          Value: "Container Lab"

  # Cloudformation Custom Resource to trigger Lambda Function
  CustomResource:
    Type: Custom::LambdaCrossStackRef
    Properties:
      ServiceToken:
        !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${InitFunction}'
      StackName: "CustomResourceEvent"
      JobDefinitionArn: !Ref JobDefinition
      JobQueue: !Sub '${PrefixName}_Lab_Queue'
    DependsOn: JobQueue
