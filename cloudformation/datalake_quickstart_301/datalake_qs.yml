Description:
  This template deploys the resources for data lake quickstart template

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Prefix Configuration"
        Parameters:
          - PrefixName

      -
        Label:
          default: "VPC Configuration"
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

      -
        Label:
          default: "EC2 <Data Transfer Server> Configuration"
        Parameters:
          - KeyName
          - InstanceType

      -
        Label:
          default: "S3 <Data Lake Storage> Configuration"
        Parameters:
          - S3DataLakeBucketName

      -
        Label:
          default: "SNS Email Target Configuration"
        Parameters:
          - SnsEmailTarget

    ParameterLabels:

      PrefixName:
        default: "Prefix Name"

      VpcCIDR:
        default: "VPC CIDR"

      PublicSubnet1CIDR:
        default: "Public Subnet 1 CIDR"

      PublicSubnet2CIDR:
        default: "Public Subnet 2 CIDR"

      PrivateSubnet1CIDR:
        default: "Private Subnet 1 CIDR"

      PrivateSubnet2CIDR:
        default: "Private Subnet 2 CIDR"

      KeyName:
        default: "EC2 Key Pair"

      InstanceType:
        default: "EC2 Instance Type"

      S3DataLakeBucketName:
        default: "S3 Data Lake Bucket Name"

      SnsEmailTarget:
        default: "SNS Email Target"


Parameters:

  PrefixName:
    Description: An environment name that will be prefixed to resource names (only contain lowercase letters and numbers or underscore (_))
    Type: String
    Default: dna_team
    AllowedPattern: ^[a-z0-9_.]+$
    ConstraintDescription: Malformed input-Parameter PrefixName must only contain lowercase letters and numbers or underscore (_)

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for the VPC of Lab
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.0/24

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.0/28

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.32/28

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.128/28

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Invalid CIDR format
    Default: 10.66.89.160/28

  KeyName:
    Description: Choose an existing key pair.
    Type: 'AWS::EC2::KeyPair::KeyName'

  InstanceType:
    Description: Select one of the instance types
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium

  S3DataLakeBucketName:
    Description: Please enter a <UNIQUE> bucket name to create a data repository for S3
    Type: String
    Default: datalake-lab-bucket-ver6689
    AllowedPattern: ^[a-z0-9.-]+$
    ConstraintDescription: Malformed input-Parameter S3DataLakeBucket must be unique and only contain lowercase letters and numbers

  SnsEmailTarget:
    Description: Enter the Email address for the target of SNS notification
    Type: String
    Default: e.g.sam@ecloud6689.com
    AllowedPattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
    ConstraintDescription: Malformed input-Parameter SnsEmailTarget must be a valid email format

Conditions:
  IsConfigureEmail:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: SnsEmailTarget

Resources:

  # VPC with multi-AZ
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref PrefixName
        - Key: "Project"
          Value: "Data Lake Quickstart"
  # IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PrefixName
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # IGW Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Public Subnet (AZ1)
        - Key: "Project"
          Value: "Data Lake Quickstart"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Public Subnet (AZ2)
        - Key: "Project"
          Value: "Data Lake Quickstart"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Private Subnet (AZ1)
        - Key: "Project"
          Value: "Data Lake Quickstart"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Private Subnet (AZ2)
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # NAT Gateway EIP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Ref PrefixName
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Route Table for public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Public Routes
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Route for public subnet
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route table attachment for public subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Route table attachment for public subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Route Table for private subnet 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Private Routes (AZ1)
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Route for private subnet 1
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Route table attachment for private subnet 1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  # Route Table for private subnet 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} Private Routes (AZ2)
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Route for private subnet 2
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Route table attachment for private subnet 2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # NACL for public subnets
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} NACL (Public Subnets)
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Default Inbound Rule for NACL of public subnets
  PublicNetworkAclEntryInbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0

  # Default Outbound Rule for NACL of public subnets
  PublicNetworkAclEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0

  # NACL association for public subnet 1
  PublicSubnet1NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PublicSubnet1
       NetworkAclId: !Ref PublicNetworkAcl

  # NACL association for public subnet 2
  PublicSubnet2NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PublicSubnet2
       NetworkAclId: !Ref PublicNetworkAcl

  # NACL for private subnets
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName} NACL (Private Subnets)
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Default Inbound Rule for NACL of private subnets
  PrivateNetworkAclEntryInbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0

  # Default Outbound Rule for NACL of private subnets
  PrivateNetworkAclEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0

  # NACL association for private subnet 1
  PrivateSubnet1NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PrivateSubnet1
       NetworkAclId: !Ref PrivateNetworkAcl

  # NACL association for private subnet 2
  PrivateSubnet2NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PrivateSubnet2
       NetworkAclId: !Ref PrivateNetworkAcl

  # SecurityGroup for VPC
  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${PrefixName}_sg'
      GroupDescription: "Security group with default rule for batch job"
      VpcId: !Ref VPC
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Security Group Ingress
  SecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: VPCSecurityGroup
    Properties:
      GroupId: !GetAtt VPCSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt VPCSecurityGroup.GroupId
      Description: "SG refer to itself"

  # EMR Security Group
  EMRMasterPrivateSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EMR Master Private SG
      VpcId: !Ref VPC
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  EMRSlavePrivateSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EMR Slave Private SG
      VpcId: !Ref VPC
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  EMRServiceAccessSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EMR Service Access SG
      VpcId: !Ref VPC
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  EMRMasterPrivateSGIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRMasterPrivateSG
    Properties:
      GroupId: !Ref EMRMasterPrivateSG
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref EMRMasterPrivateSG

  EMRMasterPrivateSGIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRMasterPrivateSG
    Properties:
      GroupId: !Ref EMRMasterPrivateSG
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref EMRMasterPrivateSG

  EMRMasterPrivateSGIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRMasterPrivateSG
    Properties:
      GroupId: !Ref EMRMasterPrivateSG
      IpProtocol: udp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref EMRMasterPrivateSG

  EMRMasterPrivateSGIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRMasterPrivateSG
    Properties:
      GroupId: !Ref EMRMasterPrivateSG
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref EMRSlavePrivateSG

  EMRMasterPrivateSGIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRMasterPrivateSG
    Properties:
      GroupId: !Ref EMRMasterPrivateSG
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref EMRSlavePrivateSG

  EMRMasterPrivateSGIngress6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRMasterPrivateSG
    Properties:
      GroupId: !Ref EMRMasterPrivateSG
      IpProtocol: udp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref EMRSlavePrivateSG

  EMRMasterPrivateSGIngress7:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRMasterPrivateSG
    Properties:
      GroupId: !Ref EMRMasterPrivateSG
      IpProtocol: tcp
      FromPort: '8443'
      ToPort: '8443'
      SourceSecurityGroupId: !Ref EMRServiceAccessSG

  EMRSlavePrivateSGIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRSlavePrivateSG
    Properties:
      GroupId: !Ref EMRSlavePrivateSG
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref EMRSlavePrivateSG

  EMRSlavePrivateSGIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRSlavePrivateSG
    Properties:
      GroupId: !Ref EMRSlavePrivateSG
      IpProtocol: tcp
      FromPort: 0
      ToPort: '65535'
      SourceSecurityGroupId: !Ref EMRSlavePrivateSG

  EMRSlavePrivateSGIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRSlavePrivateSG
    Properties:
      GroupId: !Ref EMRSlavePrivateSG
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref EMRSlavePrivateSG

  EMRSlavePrivateSGIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRSlavePrivateSG
    Properties:
      GroupId: !Ref EMRSlavePrivateSG
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref EMRMasterPrivateSG

  EMRSlavePrivateSGIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRSlavePrivateSG
    Properties:
      GroupId: !Ref EMRSlavePrivateSG
      IpProtocol: tcp
      FromPort: 0
      ToPort: '65535'
      SourceSecurityGroupId: !Ref EMRMasterPrivateSG

  EMRSlavePrivateSGIngress6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRSlavePrivateSG
    Properties:
      GroupId: !Ref EMRSlavePrivateSG
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref EMRMasterPrivateSG

  EMRSlavePrivateSGIngress7:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRSlavePrivateSG
    Properties:
      GroupId: !Ref EMRSlavePrivateSG
      IpProtocol: tcp
      FromPort: '8443'
      ToPort: '8443'
      SourceSecurityGroupId: !Ref EMRServiceAccessSG

  EMRServiceAccessSGEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    DependsOn: EMRServiceAccessSG
    Properties:
      GroupId: !Ref EMRServiceAccessSG
      IpProtocol: tcp
      FromPort: '8443'
      ToPort: '8443'
      SourceSecurityGroupId: !Ref EMRMasterPrivateSG

  EMRServiceAccessSGEgress2:
    Type: 'AWS::EC2::SecurityGroupEgress'
    DependsOn: EMRServiceAccessSG
    Properties:
      GroupId: !Ref EMRServiceAccessSG
      IpProtocol: tcp
      FromPort: '8443'
      ToPort: '8443'
      SourceSecurityGroupId: !Ref EMRSlavePrivateSG


  # EC2 Instance
  Ec2Server:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-07539a31f72d244e7
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref Ec2InstanceProfile
      SecurityGroupIds:
        - !Ref VPCSecurityGroup
      SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key: "Name"
          Value: !Sub '${PrefixName} Data Lake Server'
        - Key: "Project"
          Value: "Data Lake Quickstart"

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          aws s3 sync s3://ecv-tutorial-preparation/spectrum_sample_data/Weather/ s3://${S3DataRepositoryBucket}/Weather/ --sse --region ${AWS::Region}
          # aws glue start-crawler --name ${GlueCrawler} --region ${AWS::Region}

  # EC2 Profile
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - Ref: Ec2InstanceRole

  # EC2 Instance Profile
  Ec2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: Ec2InstanceRole

  # EC2 Instance Role
  Ec2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref S3DataRepositoryPolicy
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole

      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # =============================S3 & Glue=============================

  # S3 bucket of data repository
  S3DataRepositoryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3DataLakeBucketName
      # Enable Block Public Access
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      # Server Side Encryption
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      # Tagging
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"
    DeletionPolicy: Delete # set <Retain> when production

  # Create a managed policy for S3 data repository and script access
  S3DataRepositoryPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    DependsOn: S3DataRepositoryBucket
    Properties:
      ManagedPolicyName: !Sub '${PrefixName}_S3DataLakePolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: VisualEditor1
          Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:DeleteObject
            - s3:GetBucketAcl
            - s3:GetBucketLocation
            - s3:GetObjectTagging
            - s3:PutObjectTagging
          Resource:
            - !Sub 'arn:aws:s3:::${S3DataRepositoryBucket}/*'
            - !Sub 'arn:aws:s3:::${S3DataRepositoryBucket}/'
        - Sid: VisualEditor2
          Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetObject
          Resource:
            - !Sub 'arn:aws:s3:::ecv-tutorial-preparation/*'
            - !Sub 'arn:aws:s3:::ecv-tutorial-preparation'

  # Glue Service role
  AWSGlueServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: S3DataRepositoryPolicy
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: "/"
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Glue Database
  GlueDatabase:
    Type: "AWS::Glue::Database"
    Properties:
      DatabaseInput:
        Description: !Sub 'Glue database for ${PrefixName}'
        Name: !Sub '${PrefixName}_db'
        Parameters: {"Project": "Data Lake Quickstart"}
      CatalogId: !Ref AWS::AccountId

  # Glue Crawler
  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${PrefixName}_datalake_crawler'
      Role: !GetAtt AWSGlueServiceRole.Arn
      DatabaseName: !Ref GlueDatabase
      Targets:
        S3Targets:
          - Path: !Sub '${S3DataRepositoryBucket}/'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
      Tags: {"Project": "Data Lake Quickstart"}

  # SNS Topic for Job Alert
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub '<${PrefixName}> Lab Messenger'
      Subscription:
        - Endpoint: !If [IsConfigureEmail, !Ref SnsEmailTarget, !Ref "AWS::NoValue"]
          Protocol: !If [IsConfigureEmail, email, !Ref "AWS::NoValue"]
      TopicName: !Sub '${PrefixName}_Job_Notification'

  # Lambda Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - Ref: S3DataRepositoryPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"


  # Lambda Layer
  RequestLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: ecv-dna-lab-datalake-qs
        S3Key: lambda/requests_module.zip
      Description: Requests layer
      LayerName: requests-layer
      LicenseInfo: MIT

  # Lambda Layer
  Boto3Layer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: ecv-dna-lab-datalake-qs
        S3Key: lambda/boto3_latest.zip
      Description: Latest boto3 layer
      LayerName: latest-boto3-layer
      LicenseInfo: MIT

  # Lambda Function
  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${PrefixName}_cfn_init'
      Handler: cfn_init_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Description: A Handler for initial job
      Timeout: 300
      Layers:
        - !Ref RequestLayer
        - !Ref Boto3Layer
      Code:
        # Choose your script in a specific S3 bucket.
        S3Bucket: ecv-dna-lab-datalake-qs
        S3Key: lambda/cfn_init_function.zip
      Environment:
        Variables:
          Prefix: !Ref PrefixName
          S3DataRepoName: !Ref S3DataLakeBucketName
          SnsTopic: !Ref SnsTopic
          StateMachineArn: !Ref EMRStateMachine
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Lambda Function
  ExecEmrFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${PrefixName}_emr_jobflow'
      Handler: emr_run_jobflow.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Description: A Handler for EMR job execution
      Timeout: 300
      Layers:
        - !Ref RequestLayer
        - !Ref Boto3Layer
      Code:
        # Choose your script in a specific S3 bucket.
        S3Bucket: ecv-dna-lab-datalake-qs
        S3Key: lambda/emr_run_jobflow.zip
      Environment:
        Variables:
          Prefix: !Ref PrefixName
          S3DataRepoName: !Ref S3DataLakeBucketName
          SnsTopic: !Ref SnsTopic
          SubnetId: !Ref PrivateSubnet2
          LogUri: !Sub 's3://aws-logs-${AWS::AccountId}-ap-southeast-1/elasticmapreduce/'
          LabBucket: ecv-dna-lab-datalake-qs
          MasterSg: !Ref EMRMasterPrivateSG
          SlaveSg: !Ref EMRSlavePrivateSG
          ServiceAccessSg: !Ref EMRServiceAccessSG
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Lambda Function
  GetStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${PrefixName}_status_checker'
      Handler: emr_cluster_status.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Description: A Handler to check the status of EMR cluster
      Timeout: 300
      Layers:
        - !Ref RequestLayer
        - !Ref Boto3Layer
      Code:
        # Choose your script in a specific S3 bucket.
        S3Bucket: ecv-dna-lab-datalake-qs
        S3Key: lambda/emr_cluster_status.zip
      Environment:
        Variables:
          Prefix: !Ref PrefixName
          S3DataRepoName: !Ref S3DataLakeBucketName
          SnsTopic: !Ref SnsTopic
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Lambda Function
  CompleteFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${PrefixName}_complete_monitor'
      Handler: job_complete_monitor.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Description: A Handler to check if the task is completed
      Timeout: 300
      Layers:
        - !Ref RequestLayer
        - !Ref Boto3Layer
      Code:
        # Choose your script in a specific S3 bucket.
        S3Bucket: ecv-dna-lab-datalake-qs
        S3Key: lambda/job_complete_monitor.zip
      Environment:
        Variables:
          Prefix: !Ref PrefixName
          S3DataRepoName: !Ref S3DataLakeBucketName
          SnsTopic: !Ref SnsTopic
          GlueCrawlerName: !Ref GlueCrawler
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

  # Custom Resource
  CustomResource:
    DependsOn: EMRStateMachine
    Type: Custom::LambdaCrossStackRef
    Properties:
      ServiceToken:
        !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${InitFunction}
      StackName: "DataLakeQs"

  # Step Function Role
  StateMachineLambdaInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'StateMachineLambdInvokeRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub 'states.${AWS::Region}.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'

  # Step Function State Machine
  EMRStateMachine:
    DependsOn: Ec2Server
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A state machine that creates an EMR Cluster, checks its status, submits a step to the cluster, monitors the Step until it completes.",
              "StartAt": "Create EMR Cluster Run Step",
              "States": {
                  "Create EMR Cluster Run Step": {
                      "Type": "Task",
                      "Resource": "${RunEmrLambdaArn}",
                      "ResultPath": "$.emrInfo",
                      "Next": "Wait for CreateEMRCluster job to complete"
                  },
                  "Wait for CreateEMRCluster job to complete": {
                      "Type": "Wait",
                      "Seconds": 300,
                      "Next": "Check EMR cluster status"
                  },
                  "Check EMR cluster status": {
                      "Type": "Task",
                      "Resource": "${GetEmrStatusLambdaArn}",
                      "Next": "EMR cluster is running?",
                      "ResultPath": "$.clusterStatus"
                  },
                  "EMR cluster is running?": {
                      "Type": "Choice",
                      "Choices": [
                          {
                            "Variable": "$.clusterStatus",
                            "StringEquals": "RUNNING",
                            "Next": "Wait for EMR step to complete"
                          },
                          {
                            "Variable": "$.clusterStatus",
                            "StringEquals": "FAILED",
                            "Next": "EMR cluster creation failed"
                          }
                      ],
                      "Default": "Wait for EMR cluster running"
                  },
                  "EMR cluster creation failed": {
                      "Type": "Fail",
                      "Error": "Create EMR Cluster Run Step",
                      "Cause": "CreateEMRClusterRunStep job did not complete successfully. Please check logs."
                  },
                  "Wait for EMR cluster running": {
                      "Type": "Wait",
                      "Seconds": 15,
                      "Next": "Check EMR cluster status"
                  },
                  "Wait for EMR step to complete": {
                      "Type": "Wait",
                      "Seconds": 600,
                      "Next": "Monitor EMR step"
                  },
                  "Monitor EMR step": {
                      "Type": "Task",
                      "Resource": "${CompleteLambdaArn}",
                      "ResultPath": "$.jobStatus",
                      "Next": "EMR step is complete?"
                  },
                  "EMR step is complete?": {
                      "Type": "Choice",
                      "Choices": [
                          {
                            "Variable": "$.jobStatus",
                            "StringEquals": "OK",
                            "Next": "EMR step run succeeded and task finished"
                          },
                          {
                            "Variable": "$.jobStatus",
                            "StringEquals": "FAILED",
                            "Next": "EMR step run failed"
                          }
                      ],
                      "Default": "Wait for EMR step complete"
                  },
                  "EMR step run failed": {
                      "Type": "Fail",
                      "Error": "Monitor EMR step",
                      "Cause": "MonitorEMRstepjob have found error when running the step. Please check logs."
                  },
                  "Wait for EMR step complete" :{
                      "Type": "Wait",
                      "Seconds": 15,
                      "Next": "Monitor EMR step"
                  },
                  "EMR step run succeeded and task finished": {
                      "Type": "Pass",
                      "End": true
                  }
                }
              }
          - {RunEmrLambdaArn: !GetAtt [ExecEmrFunction , Arn ], GetEmrStatusLambdaArn: !GetAtt [ GetStatusFunction, Arn ], CompleteLambdaArn: !GetAtt [ CompleteFunction, Arn ]}
      RoleArn: !GetAtt StateMachineLambdaInvokeRole.Arn
      Tags:
        - Key: "Project"
          Value: "Data Lake Quickstart"

Outputs:

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  VPCSecurityGroup:
    Description: Security group with default rule
    Value: !Ref VPCSecurityGroup

  SecurityGroupIngress:
    Description: Inbound rule of Security group
    Value: !Ref SecurityGroupIngress

  S3DataRepositoryBucket:
    Description: Name of data repository bucket
    Value: !Ref S3DataRepositoryBucket

  S3DataRepositoryPolicy:
    Description: ManagedPolicy for S3 DataRepositoryBucket
    Value: !Ref S3DataRepositoryPolicy

  Ec2Server:
    Description: EC2 Server
    Value: !Ref Ec2Server

  Ec2InstanceRole:
    Description: EC2 Instance Role
    Value: !Ref Ec2InstanceRole

  AWSGlueServiceRole:
    Description: Glue Service Role
    Value: !Ref AWSGlueServiceRole

  GlueDatabase:
    Description: Glue database in data lake
    Value: !Ref GlueDatabase

  GlueCrawler:
    Description: Glue crawler
    Value: !Ref GlueCrawler

  SnsTopic:
    Description: SNS topic
    Value: !Ref SnsTopic

  LambdaRole:
    Description: Lambda function role
    Value: !Ref LambdaRole

  RequestLayer:
    Description: Request layer
    Value: !Ref RequestLayer

  Boto3Layer:
    Description: Boto3 layer
    Value: !Ref Boto3Layer

  InitFunction:
    Description: Initial Lambda function
    Value: !Ref InitFunction

  ExecEmrFunction:
    Description: Lambda function to run EMR
    Value: !Ref ExecEmrFunction

  GetStatusFunction:
    Description: Lambda function to check the EMR status
    Value: !Ref GetStatusFunction

  CompleteFunction:
    Description: Lambda function to check if the task is completed
    Value: !Ref CompleteFunction

  CustomResource:
    Description: Custom Resource of this stack
    Value: !Ref CustomResource

  EMRStateMachine:
    Description: State machine for Step Function
    Value: !Ref EMRStateMachine
